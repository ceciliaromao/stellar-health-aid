// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id                     String   @id @default(cuid())
  email                  String   @unique
  googleSub              String?  @unique
  publicKey              String?  @unique // Stellar public address (G...)
  walletContractId       String?  @unique // Smart wallet contract id
  secretKeyCiphertext    String?  // Opcional: se armazenar a chave privada, guarde criptografada
  accountStatus          String   @default("none") // none | created | funded | error
  crossmintUserId        String?  @unique
  passkeyContractId      String?  @unique
  passkeyKeyIdBase64     String? // credentialId
  passkeyPublicKey       String? // se quiser armazenar
  deployStatus           String   @default("none") // none | creating | deployed | pending_retry | failed
  lastError              String?
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
}

model ProviderRegistry {
  id               String   @id @default(cuid())
  contractId       String   @unique
  adminPublicKey   String
  network          String   @default("testnet")
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  providers        Provider[]
}

model Provider {
  id               String            @id @default(cuid())
  registryId       String
  registry         ProviderRegistry  @relation(fields: [registryId], references: [id], onDelete: Cascade)
  name             String
  description      String?
  walletPublicKey  String            @unique // Stellar public key (G...)
  isActive         Boolean           @default(true)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
}

model AppTxn {
  id                     String   @id @default(cuid())
  userId                 String
  walletLocator          String
  crossmintTransactionId String   @unique
  chain                  String
  asset                  String
  amount                 Decimal  @db.Decimal(78, 0)
  status                 String // pending | submitted | confirmed | failed...
  metadata               Json?
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
}
